ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
train<-data_omit[-ind,]
colnames(trian)
colnames(train)
train[1,580]
train[1,58]
train[1,581]
sum(train[,580] - train[,581])
data_omit = na.omit(data_full)
data_omit = data_omit[,-c(1,2)]
data_omit = apply(data_omit,2,as.double)
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
train<-data_omit[-ind,]
colnames(train)
score_lasso = glmnet(train[,-c(580,581)],train[,580],family="gaussian",alpha=1)
summary(score_lasso)
score_lasso$beta
colname(test)
colnames(test)
summary(predict(score_lasso,test[,-c(580,581)])-test$salePrice)
summary(predict(score_lasso,test[,-c(580,581)])-test[,580])
predict(score_lasso,test[,-c(580,581)])[1]
length(predict(score_lasso,test[,-c(580,581)]))
dim(test)
dim(test[,-c(580:581)])
coef(score_lasso)
data_omit = na.omit(data_full)
data_omit = na.omit(data_full)
data_omit = data_omit[,-c(1,2)]
data_omit = apply(data_omit,2,as.double)
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
train<-data_omit[-ind,]
score_lasso = glmnet(train[,-c(580,581)],train[,580],family="gaussian",alpha=1)
length(predict(score_lasso,test[,-c(580,581)]))
score_lasso = glmnet(train[,-c(580,581)],train[,c(580)],family="gaussian",alpha=1)
summary(predict(score_lasso,test[,-c(580,581)])-test[,580])
length(predict(score_lasso,test[,-c(580,581)]))
data_omit = na.omit(data_full)
data_omit = na.omit(data_full)
data_omit = data_omit[,-c(1,2)]
data_omit = data_omit[,-c(1,2)]
data_omit = apply(data_omit,2,as.double)
data_omit = data_omit[,-c(1,2)]
data_omit = apply(data_omit,2,as.double)
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
data_omit = na.omit(data_full)
data_omit = data_omit[,-c(1,2)]
data_omit = apply(data_omit,2,as.double)
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
score_lasso = glmnet(train[,-c(580,581)],train[,c(580)],family="gaussian",alpha=1)
summary(socre_lasso)
str(train)
data_omit = na.omit(data_full)
data_omit = data_omit[,-c(1,2)]
data_omit = apply(data_omit,2,as.double)
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
train<-data_omit[-ind,]
data_omit = na.omit(data_full)
data_omit = data_omit[,-c(1,2)]
data_omit = apply(data_omit,2,as.double)
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
train<-data_omit[-ind,]
colnames(data_omit)
data_omit = na.omit(data_full)
data_omit = data_omit[,-c(1,2)]
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
train<-data_omit[-ind,]
colnames(data_omot)
colnames(data_omit)
data_omit = na.omit(data_full)
colnames(data_omit)
data_omit = data_omit[,-c(1,2)]
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
train<-data_omit[-ind,]
data_omit = na.omit(data_full)
data_omit = data_omit[,-c(1,2,583)]
colnames(data_omit)
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
train<-data_omit[-ind,]
colnames(data_omit)
score_lasso = glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),family="gaussian",alpha=1)
colnames(test)
length(predict(score_lasso,test[,-c(580)]))
length(predict(score_lasso,test[,-c(580)]))
summary(predict(score_lasso,test[,-c(580,581)])-test[,580])
length(predict(score_lasso,as.matrix(test[,-c(580)])))
dim(as.matrix(train[,-c(580)]))
length(test)
length(train)
data_omit = na.omit(data_full)
data_omit = na.omit(data_full)
data_omit = na.omit(data_full)
data_omit = data_omit[,-c(1,2,583)]
dim(data_omit)
data_omit = na.omit(data_full)
dim(data_omit)
data_omit = na.omit(data_full)
data_omit = data_omit[,-c(1,2,583)]
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
legth(ind)
legnth(ind)
length(ind)
test<-data_omit[ind,]
train<-data_omit[-ind,]
dim(train)
dim(test)
dim(as.matrix(train[,-c(580)]))
dim(as.matrix(train[,c(580)])
)
length(as.matrix(train[,580]))
data_omit = na.omit(data_full)
data_omit = data_omit[,-c(1,2,583)]
#data_omit = apply(data_omit,2,as.double)
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
train<-data_omit[-ind,]
score_lasso = glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),family="gaussian",alpha=1)
length(predict(score_lasso,as.matrix(test[,-c(580)])))
dim(as.matrix(test[,-c(580)]))
dim(test)
score_lasso$lambda
lambda = cv.glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]))
lambda = cv.glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]))$lambda.1se
lambda
lambda
score_lasso = glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),family="gaussian",alpha=1,lambda = lambda)
length(predict(score_lasso,as.matrix(test[,-c(580)])))
summary(predict(score_lasso,test[,-c(580,581)])-test[,580])
length(predict(score_lasso,as.matrix(test[,-c(580)])))
predict(score_lasso,as.matrix(test[,-c(580)]))[1]
predict(score_lasso,as.matrix(test[,-c(580)]))[2]
predict(score_lasso,as.matrix(test[,-c(580)]))[3]
predict(score_lasso,as.matrix(test[,-c(580)]))[5]
predict(score_lasso,as.matrix(test[,-c(580)]))[575]
table(predict(score_lasso,as.matrix(test[,-c(580)])))
score_lasso = glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),family="gaussian",alpha=1,lambda = 0.8)
table(predict(score_lasso,as.matrix(test[,-c(580)])))
summary(predict(score_lasso,test[,-c(580,581)])-test[,580])
length(predict(score_lasso,as.matrix(test[,-c(580)])))
test[,580][1]
test[,580]
prediction = predict(score_lasso,test[,-c(580,581)])
predict(score_lasso,test[,-c(580,581)])[1]
colnames(test)
test[,580]
colnames(test)
colnames(test)[580]
prediction = predict(score_lasso,test[,-c(580)])
prediction = predict(score_lasso,as.matrix(test[,-c(580)]))
length(prediction)
prediction[1]
prediction[575]
colnames(test)
colnames(test)[580]
summary(prediction - as.numeric(test[,580]))
lambda = cv.glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]))$lambda.min
lambda
score_lasso = glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),family="gaussian",alpha=1,lambda = lambda)
prediction = predict(score_lasso,as.matrix(test[,-c(580)]))
summary(prediction - as.numeric(test[,580]))
score_lasso = glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),family="gaussian",alpha=1,lambda = 0.8)
sum((prediction - as.numeric(test[,580]))^2)
lambda = cv.glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),type.measure = "mse")$lambda.min
lambda
score_lasso = glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),family="gaussian",alpha=1,lambda = lambda)
prediction = predict(score_lasso,as.matrix(test[,-c(580)]))
summary(prediction - as.numeric(test[,580]))
data_full<-read.csv("../data/data_full.csv")
data_full<-read.csv("../data/data_full.csv")
data<-read.csv("../data/auctionItems.csv")[,c(3,9,13)]
data$Id<-paste0(data$auctionId,"_",data$id)
data<-data[,-c(1,2)]
data_full<-merge(data_full,data,by.x="ID",by.y="Id")
colnames(data_full)[3:56]<-paste("HoG",1:54,sep="")
colnames(data_full)[57:568]<-paste("RGB",1:512,sep="")
dim(data_full)
ind<-sample(1:dim(data_full)[1],dim(data_full)[1] * 0.25)
test<-data_full[ind,]
train<-data_full[-ind,]
data_full<-read.csv("../data/data_full.csv")
data_full<-read.csv("../data/data_full.csv")
data<-read.csv("../data/auctionItems.csv")[,c(3,9,13)]
data$Id<-paste0(data$auctionId,"_",data$id)
data<-data[,-c(1,2)]
data_full<-merge(data_full,data,by.x="ID",by.y="Id")
colnames(data_full)[3:56]<-paste("HoG",1:54,sep="")
colnames(data_full)[57:568]<-paste("RGB",1:512,sep="")
ind<-sample(1:dim(data_full)[1],dim(data_full)[1] * 0.25)
test<-data_full[ind,]
test<-data_full[ind,]
train<-data_full[-ind,]
score<- lm(salePrice~.,train[,-c(1,2)])#regular regression
data_full<-read.csv("../data/data_full.csv")
data<-read.csv("../data/auctionItems.csv")[,c(3,9,13)]
data$Id<-paste0(data$auctionId,"_",data$id)
data<-data[,-c(1,2)]
data_full<-merge(data_full,data,by.x="ID",by.y="Id")
colnames(data_full)[3:56]<-paste("HoG",1:54,sep="")
colnames(data_full)[57:568]<-paste("RGB",1:512,sep="")
ind<-sample(1:dim(data_full)[1],dim(data_full)[1] * 0.25)
test<-data_full[ind,]
train<-data_full[-ind,]
score<- lm(salePrice~.,train[,-c(1,2)])#regular regression
summary(predict(score,test[,-c(1,2)])-test$salePrice)
A = summary(predict(score,test[,-c(1,2)])-test$salePrice)
A
regular.mse = mean((predict(score,test[,-c(1,2)])-test$salePrice)^2)
regular.mse
(predict(score,test[,-c(1,2)])-test$salePrice)
sum((predict(score,test[,-c(1,2)])-test$salePrice)^2)
colnames(test)
regular.summary = summary(predict(score,test[,-c(1,2)])-test$salePrice)
A = na.omit(predict(socre,test[,-c(1,2)]))
A = na.omit(predict(score,test[,-c(1,2)]))
regular.prediction = predict(score,test[,-c(1,2)])
na.position = which(is.na(regular.prediction))
na.position
length(na.position)
regular.prediction = regular.prediction[-na.position]
regular.summary = summary(predict(score,test[,-c(1,2)])-test$salePrice[-na.position])
regular.summary
colnames(data_full)
data_omit = na.omit(data_full)#Remove any rows that has na valuse in it
colnames(data_omit)
data_full<-read.csv("../data/data_full.csv")
data_full<-read.csv("../data/data_full.csv")
data<-read.csv("../data/auctionItems.csv")[,c(3,9,13)]
data$Id<-paste0(data$auctionId,"_",data$id)
data<-data[,-c(1,2)]
data_full<-merge(data_full,data,by.x="ID",by.y="Id")
colnames(data_full)[3:56]<-paste("HoG",1:54,sep="")
colnames(data_full)[3:56]<-paste("HoG",1:54,sep="")
colnames(data_full)[57:568]<-paste("RGB",1:512,sep="")
ind<-sample(1:dim(data_full)[1],dim(data_full)[1] * 0.25)
test<-data_full[ind,]
train<-data_full[-ind,]
score<- lm(salePrice~.,train[,-c(1,2)])#regular regression
score<- lm(salePrice~.,train[,-c(1,2)])#regular regression
regular.prediction = predict(score,test[,-c(1,2)])#Store predictions from regular regression model
na.position = which(is.na(regular.prediction))#Locate na positions
regular.prediction = regular.prediction[-na.position]#Remove all na predicitons from regular regression predictions
regular.summary = summary(predict(score,test[,-c(1,2)])-test$salePrice[-na.position])
regular.mse = sum((regular.prediction-test$salePrice[-na.position])^2)
regular.mse
regular.summary
data_omit = na.omit(data_full)#Remove any rows that has na valuse in it
colnames(data_omit)
data_omit = na.omit(data_full)#Remove any rows that has na valuse in it
data_omit = data_omit[,-c(1,2)]#Remove non-useful columns
colnames(data_omit)
data_omit = na.omit(data_full)#Remove any rows that has na valuse in it
data_omit = data_omit[,-c(1,2)]#Remove non-useful columns
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
train<-data_omit[-ind,]
lambda = cv.glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),type.measure = "mse")$lambda.min#Cross validate to find the best lambda values
score_lasso = glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),family="gaussian",alpha=1,lambda = lambda)#Fit lasso model
lasso.prediction = predict(score_lasso,as.matrix(test[,-c(580)]))#Prodce prediction
lasso.summary = summary(prediction - as.numeric(test[,580]))
lasso.mse = mean((lasso.prediction-test[,-c(580)])^2)
lasso.summary
lasso.mse
regular.mse - lasso.mse
(regular.mse - lasso.mse)/lasso.mse
(regular.mse - lasso.mse)/regular.mse
lasso.summary
lasso.summary[1]
lasso.summary$s0
lasso.summary[1]
regular.summary[1]
regular.summary[2]
?kable
summary(score_lasso)
score_lasso$beta
summary(score)
summary(score_lasso)
score_lasso$beta
score_lasso$df
score_lasso$df
score_lasso$dim
score_lasso$beta
score_lasso$beta
data_full<-read.csv("../data/data_full.csv")
data<-read.csv("../data/auctionItems.csv")[,c(3,9,13)]
data$Id<-paste0(data$auctionId,"_",data$id)
data<-data[,-c(1,2)]
data_full<-merge(data_full,data,by.x="ID",by.y="Id")
colnames(data_full)[3:56]<-paste("HoG",1:54,sep="")
colnames(data_full)[57:568]<-paste("RGB",1:512,sep="")
####Regular regression methods:
#We randomly split 25% of our data as testing data set:
ind<-sample(1:dim(data_full)[1],dim(data_full)[1] * 0.25)
test<-data_full[ind,]
train<-data_full[-ind,]
score<- lm(salePrice~.,train[,-c(1,2)])#regular regression
regular.prediction = predict(score,test[,-c(1,2)])#Store predictions from regular regression model
na.position = which(is.na(regular.prediction))#Locate na positions
regular.prediction = regular.prediction[-na.position]#Remove all na predicitons from regular regression predictions
#Produce statistics for comparison
regular.summary = summary(predict(score,test[,-c(1,2)])-test$salePrice[-na.position])
regular.mse = sum((regular.prediction-test$salePrice[-na.position])^2)
####Advanced regression methods : LASSO Regression
#We randomly split 25% of our data as testing data set:
data_omit = na.omit(data_full)#Remove any rows that has na valuse in it
data_omit = data_omit[,-c(1,2)]#Remove non-useful columns
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
train<-data_omit[-ind,]
lambda
score_lasso = glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),family="gaussian",alpha=1,lambda = lambda)#Fit lasso model
coef(summary(score_lasso))
score_lasso = glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),family="gaussian",alpha=1,lambda = lambda)#Fit lasso model
coef(summary(score_lasso))
coef(score_lasso)
#read in the cleaned up data
data_full<-read.csv("../data/data_full.csv")
data<-read.csv("../data/auctionItems.csv")[,c(3,9,13)]
data$Id<-paste0(data$auctionId,"_",data$id)
data<-data[,-c(1,2)]
data_full<-merge(data_full,data,by.x="ID",by.y="Id")
colnames(data_full)[3:56]<-paste("HoG",1:54,sep="")
colnames(data_full)[57:568]<-paste("RGB",1:512,sep="")
####Regular regression methods:
#We randomly split 25% of our data as testing data set:
ind<-sample(1:dim(data_full)[1],dim(data_full)[1] * 0.25)
test<-data_full[ind,]
train<-data_full[-ind,]
score<- lm(salePrice~.,train[,-c(1,2)])#regular regression
regular.prediction = predict(score,test[,-c(1,2)])#Store predictions from regular regression model
na.position = which(is.na(regular.prediction))#Locate na positions
regular.prediction = regular.prediction[-na.position]#Remove all na predicitons from regular regression predictions
#Produce statistics for comparison
regular.summary = summary(predict(score,test[,-c(1,2)])-test$salePrice[-na.position])
regular.mse = sum((regular.prediction-test$salePrice[-na.position])^2)
####Advanced regression methods : LASSO Regression
#We randomly split 25% of our data as testing data set:
data_omit = na.omit(data_full)#Remove any rows that has na valuse in it
data_omit = data_omit[,-c(1,2)]#Remove non-useful columns
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
train<-data_omit[-ind,]
lambda = cv.glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),type.measure = "mse")$lambda.min#Cross validate to find the best lambda values
score_lasso = glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),family="gaussian",alpha=1,lambda = lambda)#Fit lasso model
lasso.prediction = predict(score_lasso,as.matrix(test[,-c(580)]))#Prodce prediction
lasso.summary = summary(prediction - as.numeric(test[,580]))
lasso.mse = mean((lasso.prediction-test[,-c(580)])^2)
score_lasso$coef
lasso.summary
lambda
lasso.mse
regular.summary
regular.mse
regular.mse-lasso.mse
kable(data.frame(regular.regresson = regular.mse, lasso.regression = lasso.mse))
?kable
kable(x=data.frame(regular.regresson = regular.mse, lasso.regression = lasso.mse))
regular.summary
lasso.summary
regular.mse
lasso.mse
regular.summary
lasso.summary
data_full<-read.csv("../data/data_full.csv")
data<-read.csv("../data/auctionItems.csv")[,c(3,9,13)]
data$Id<-paste0(data$auctionId,"_",data$id)
data<-data[,-c(1,2)]
data_full<-merge(data_full,data,by.x="ID",by.y="Id")
colnames(data_full)[3:56]<-paste("HoG",1:54,sep="")
colnames(data_full)[57:568]<-paste("RGB",1:512,sep="")
ind<-sample(1:dim(data_full)[1],dim(data_full)[1] * 0.25)
test<-data_full[ind,]
train<-data_full[-ind,]
score<- lm(salePrice~.,train[,-c(1,2)])#regular regression
score<- lm(salePrice~.,train[,-c(1,2)])#regular regression
regular.prediction = predict(score,test[,-c(1,2)])#Store predictions from regular regression model
na.position = which(is.na(regular.prediction))#Locate na positions
na.position = which(is.na(regular.prediction))#Locate na positions
regular.prediction = regular.prediction[-na.position]#Remove all na predicitons from regular regression predictions
regular.summary = summary(predict(score,test[,-c(1,2)])-test$salePrice[-na.position])
regular.mse = sum((regular.prediction-test$salePrice[-na.position])^2)
regular.mse = sum((regular.prediction-test$salePrice[-na.position])^2)
regular.summary = summary(predict(score,test[,-c(1,2)])-test$salePrice[-na.position])
data_omit = na.omit(data_full)#Remove any rows that has na valuse in it
data_omit = data_omit[,-c(1,2)]#Remove non-useful columns
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
train<-data_omit[-ind,]
lambda = cv.glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),type.measure = "mse")$lambda.min#Cross validate to find the best lambda values
score_lasso = glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),family="gaussian",alpha=1,lambda = lambda)#Fit lasso model
lasso.prediction = predict(score_lasso,as.matrix(test[,-c(580)]))#Prodce prediction
lasso.summary = summary(prediction - as.numeric(test[,580]))
lasso.mse = mean((lasso.prediction-test[,-c(580)])^2)
regular.mse
lasso.mse
regular.summary
lasso.summary
lasso.summary = summary(lasso.prediction - as.numeric(test[,580]))
lasso.mse = mean((lasso.prediction-test[,-c(580)])^2)
regular.mse
lasso.mse
regular.summary
lasso.summary
lasso.summary = summary(prediction - as.numeric(test[,580]))
lasso.mse = mean((lasso.prediction-test[,-c(580)])^2)
regular.mse
lasso.mse
regular.summary
lasso.summary
head(prediction)
lasso.summary = summary(prediction - as.numeric(test[,580]))
lasso.summary
lasso.mse = mean((lasso.prediction-test[,-c(580)])^2)
lasso.mse
regular.mse
#Package needed
library(glmnet)
#install.packages("glmnet")
#intall.packages("Hmisc")
library("Hmisc")
setwd("/Users/xuehan/Desktop/Spr2017-proj5-grp8/doc") #change to your local path
source("../lib/FeatureConstruction.R")
my.dat = read.csv("../data/auctionItems.csv",header = TRUE, stringsAsFactors = FALSE)
feature.csv = Feature.Construction(my.dat)#Construct the first type of features
#dim(feature.csv)
animal<-read.csv("../output/AnimalFeature.csv")
colnames(animal)<-c("ID","animal")
#In the following step, we use the images' captions to rename the observations' ID
#Notice that the images we used are too large too upload on Gitgub. Alternatively, all 3000 images are in the Google drive (https://drive.google.com/drive/folders/0BzExzKbmVUJ2R3dsYUVYUXNvMVk?usp=sharing). Images are stored seperated in three different files (image_2500,image_5000, and image_7000). If you are interested in reproduce this project, please download them and move them all in the same folder for future use. Anyone with a LionMail should be able to access the google drive folder. After downloading the images to your local path, please go to the "image_feature_extraction.R" and change "img_dir_full" to your local path (located after loading libraries).
#Rename ID for each observations in the dataset
img_dir_full <- "/Users/xuehan/Desktop/Images/" #change to your local path of 3000 images
file.names <- list.files(img_dir_full,pattern="*.jpg")
file.names.short<-NULL
for (i in 1:length(file.names)){
file.names.short[i]<-substr(file.names[[i]],1,nchar(file.names[[i]])-4)
}
for (i in 1:nrow(animal)){
animal$ID[i]<-file.names.short[i]
}
#Merge two datasets
data.full1<-merge(feature.csv,animal,by.x="ID",by.y="ID")
#After downloading the images to your local path, please go to the "image_feature_extraction.R" and change "img_dir_full" to your local path (located after loading libraries).
#Then run the following code
#source("../lib/image_feature_extraction.R")
#The above function will take approximately 3 hours to run. So I did not
#If the above function took too long to run (3000 images), you can manually run rgb_seperate.R under doc folder. It generates the whole 3000 by 512 matrix in four chuncks, meaning from the 1th to 500th, 501th to 1000th and so on.
###HoG Feature
HoG<-read.csv("../data/HoG.csv",header=T)[,-1]
head(HoG)
###RGB Feature
RGB<-read.csv("../data/RGB.csv",header=T)[,-1]
head(RGB)
#Merge datasets by paintings' ID which is the last column
head(HoG[,ncol(HoG)])
colnames(HoG)[ncol(HoG)]<-"ID"
head(RGB[,ncol(RGB)])
colnames(RGB)[ncol(RGB)]<-"ID"
data.full<-merge(HoG,RGB,by.x="ID",by.y="ID")
colnames(data.full)[2:55]<-paste("HoG",1:54,sep="")
colnames(data.full)[56:567]<-paste("RGB",1:512,sep="")
#store full data
data_full<-merge(data.full,data.full1,by.x="ID",by.y="ID" )
write.csv(data_full,file="../data/data_full.csv")
#read in the cleaned up data
data_full<-read.csv("../data/data_full.csv")
data<-read.csv("../data/auctionItems.csv")[,c(3,9,13)]
data$Id<-paste0(data$auctionId,"_",data$id)
data<-data[,-c(1,2)]
data_full<-merge(data_full,data,by.x="ID",by.y="Id")
colnames(data_full)[3:56]<-paste("HoG",1:54,sep="")
colnames(data_full)[57:568]<-paste("RGB",1:512,sep="")
####Regular regression methods:
#We randomly split 25% of our data as testing data set:
ind<-sample(1:dim(data_full)[1],dim(data_full)[1] * 0.25)
test<-data_full[ind,]
train<-data_full[-ind,]
score<- lm(salePrice~.,train[,-c(1,2)])#regular regression
regular.prediction = predict(score,test[,-c(1,2)])#Store predictions from regular regression model
na.position = which(is.na(regular.prediction))#Locate na positions
regular.prediction = regular.prediction[-na.position]#Remove all na predicitons from regular regression predictions
#Produce statistics for comparison
regular.summary = summary(predict(score,test[,-c(1,2)])-test$salePrice[-na.position])
regular.mse = sum((regular.prediction-test$salePrice[-na.position])^2)
####Advanced regression methods : LASSO Regression
#We randomly split 25% of our data as testing data set:
data_omit = na.omit(data_full)#Remove any rows that has na valuse in it
data_omit = data_omit[,-c(1,2)]#Remove non-useful columns
ind<-sample(1:dim(data_omit)[1],dim(data_omit)[1]*0.25)
test<-data_omit[ind,]
train<-data_omit[-ind,]
lambda = cv.glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),type.measure = "mse")$lambda.min#Cross validate to find the best lambda values
score_lasso = glmnet(as.matrix(train[,-c(580)]),as.matrix(train[,c(580)]),family="gaussian",alpha=1,lambda = lambda)#Fit lasso model
lasso.prediction = predict(score_lasso,as.matrix(test[,-c(580)]))#Prodce prediction
#Produce statistics for comparison
lasso.summary = summary(prediction - as.numeric(test[,580]))
lasso.mse = mean((lasso.prediction-test[,-c(580)])^2)
#Mse
regular.mse
lasso.mse
#Summary Statistics
regular.summary
lasso.summary
prediction
lasso.prediction
