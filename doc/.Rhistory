setwd("../doc")
AnimalFeature = function(description_vector, title_vector)
{
animal_list_filename = "../data/animals.txt"
animal_df = as.character(read.delim(animal_list_filename, header=FALSE, sep = "\n")[,1])
animal_df = tolower(animal_df)
description_vector = tolower(description_vector)
title_vector = tolower(title_vector)
word_list_description = strsplit(description_vector, split = " ")
word_list_title = strsplit(title_vector, split = " ")
animal_feature = rep(0, length(description_vector))
for(i in 1:length(animal_feature))
{
if(sum(as.numeric(is.element(animal_df, as.list(word_list_description[[i]])))) >= 1)
{
animal_feature[i] = 1
}
if(sum(as.numeric(is.element(animal_df, as.list(word_list_title[[i]])))) >= 1)
{
animal_feature[i] = 1
}
}
return(animal_feature)
}
help(tolwoer)
help(tolower)
animal_list_filename = "../data/animals.txt"
animal_df = as.character(read.delim(animal_list_filename, header =FALSE, sep = "\n")[,1])
animal_df
animal_df = tolower(animal_df)
animal_df
description_vector = c("one", "two", "Dog")
title_vector = c("one", "Cat", "two")
title_vector = tolower(title_vector)
description_vector = tolower(description_vector)
word_list_title = strsplit(title_vector, split = " ")
animal_feature = rep(0, length(descrpition_vector)
)
animal_feature = rep(0, length(description_vector))
for(i in 1:length(animal_feature))
{
if(sum(as.numeric(is.element(animal_df, as.list(word_list_description[[i]])))) >= 1)
{
animal_feature[i] = 1
}
if(sum(as.numeric(is.element(animal_df, as.list(word_list_title[[i]])))) >= 1)
{
animal_feature[i] = 1
}
}
word_list_description = strsplit(description_vector, split = " ")
word_list_title = strsplit(title_vector, split = " ")
for(i in 1:length(animal_feature))
{
if(sum(aforfs.numeric(is.element(animal_df, as.list(word_list_description[[i]])))) >= 1)
{
animal_feature[i] = 1
}
if(sum(as.numeric(is.element(animal_df, as.list(word_list_title[[i]])))) >= 1)
{
animal_feature[i] = 1
}
}
for(i in 1:length(animal_feature))
{
if(sum(as.numeric(is.element(animal_df, as.list(word_list_description[[i]])))) >= 1)
{
animal_feature[i] = 1
}
if(sum(as.numeric(is.element(animal_df, as.list(word_list_title[[i]])))) >= 1)
{
animal_feature[i] = 1
}
}
animal_feature
animal_list_filename = "../data/animals.txt"
animal_list_filename
animal_df = as.character(read.delim(animal_list_filename, header=FALSE, sep = "\n")[,1])
animal_df
animal_df = as.character(read.delim(animal_list_filename, header=FALSE, sep = "\n")[,1])
setwd("../doc")
animal_list_filename = "../data/animals.txt"
animal_df = as.character(read.delim(animal_list_filename, header = FALSE, sep = "\n")[,1])
animal_df = tolower(animal_df)
description_vector = c("Dog are cool", "Cat test", "one". "two")
description_vector = c("Dog are cool", "Cat test", "one", "two")
title_vector = c("one", "dog", "none", "cat")
word_list_description = strsplit(description_vector, split = " ")
word_list_title = strsplit(description_vector, split = " ")
library("EBImage")
animal_feature = rep(0, length(description_vector))
animal_df
getwd()
setwd("./")
getwd()
source("../lib/FeatureConstruction.R")
my.dat = read.csv("../data/auctionItems.csv",header = TRUE, stringsAsFactors = FALSE)
feature.csv = Feature.Construction(my.dat)#Construct the first type of features
#dim(feature.csv)
animal<-read.csv("../output/AnimalFeature.csv")
colnames(animal)<-c("ID","animal")
#Rename ID for each observations in the dataset
img_dir_full <- "/Users/xuehan/Desktop/Images/" #local path of 3000 images
file.names <- list.files(img_dir_full,pattern="*.jpg")
file.names.short<-NULL
for (i in 1:length(file.names)){
file.names.short[i]<-substr(file.names[[i]],1,nchar(file.names[[i]])-4)
}
setwd("./") # Set working directory to doc folder
getwd()
data = read.csv("../data/data_full.csv")
colnames(data)
data$ID
head(data$ID)
auction_data = read.csv("../data/auctionItems.csv")
colnames(auction_data)
help(strsplit)
strsplit(data$ID[1], "_")
strsplit(as.character(data$ID[1]), "_")
data$ID = as.character(data$ID)
strsplit((data$ID[1]), "_")
strsplit((data$ID[1]), "_")[[1]]
strsplit((data$ID[1]), "_")[[2]]
strsplit((data$ID[1]), "_")[[1]][1]
strsplit((data$ID[1]), "_")[[1]][2]
strsplit((data$ID[1:5]), "_")
length(strsplit((data$ID[1:5]), "_")
)
id_split = strsplit(data$ID, "_")
auction_id_vector = rep(NA, length(id_split))
item_id_vector = rep(NA, length(id_split))
for(i in 1:length(id_split))
{
auction_id_vector[i] = id_split[[i]][1]
item_id_vector[i] - id_split[[i]][2]
}
data$auction_id = auction_id_vector
data$item_id = item_id_vector
id_split = strsplit(data$ID, "_")
auction_id_vector = rep(NA, length(id_split))
item_id_vector = rep(NA, length(id_split))
for(i in 1:length(id_split))
{
auction_id_vector[i] = id_split[[i]][1]
item_id_vector[i] = id_split[[i]][2]
}
data$auction_id = auction_id_vector
data$item_id = item_id_vector
head(auction_id_vector)
help(merge)
colnames(auction_data)
merged_data = merge(data, auction_data, by.x = c("auction_id", "item_id"), by.y = c("auctionID", "id"))
library(dplyr)
auction_data = select(auction_data, -auctionID, -id)
auction_data = select(auction_data, -auctionId, -id)
merged_data = merge(data, auction_data)
auction_data = select(auction_data, auction_id, item_id, salePrice)
auction_data = read.csv("../data/auctionItems.csv")
auction_data$auction_id = auction_data$auctionId
auction_data$item_id = auction_data$id
auction_data = select(auction_data, auction_id, item_id, salePrice)
merged_data = merge(data, auction_data)
help(sample)
train_rows = sample(1:nrow(merged_data), .25*nrow(merged_data))
train_data_x = merged_data[train_rows, -salePrice]
train_data = merged_data[train_rows,]
test_data = merged_data[-train_rows,]
help(lm)
linear_model = lm(salePrice ~ ., train_data)
help("predict")
linear_predict = predict(linear_model, test_data)
merged_data = select(merged_data, -auction_id, -item_id)
train_data = merged_data[train_rows,]
test_data = merged_data[-train_rows,]
linear_model = lm(salePrice ~ ., train_data)
linear_predict = predict(linear_model, test_data)
merged_data = merge(data, auction_data)
merged_data = select(merged_data, -auction_id, -item_id, -ID)
train_data = merged_data[train_rows,]
test_data = merged_data[-train_rows,]
linear_model = lm(salePrice ~ ., train_data)
linear_predict = predict(linear_model, test_data)
test_rows = sample(1:nrow(merged_data), .25*nrow(merged_data))
test_data = merged_data[test_rows,]
train_data = merged_data[-test_rows,]
linear_model = lm(salePrice ~ ., train_data)
linear_predict = predict(linear_model, test_data)
linear_predict
linear_predict$residual.scale
names(linear_predict)
linear_predict = predict.lm(linear_model, test_data)
names(linear_predict)
linear_predict = predict.lm(linear_model, test_data, se.fit = TRUE)
linear_predict$se.fit
linear_predict$residual.scale
linear_predict$fit
linear_predict = predict(linear_model, test_data, se.fit = TRUE)
summary(linear_predict)
linear_predict = predict(linear_model, test_data)
summary(linear_predict)
help(cv.glment)
help(cv.glmnet)
help(glment)
library(glmnet)
help("cv.glmnet")
help(glment)
help("glmnet")
